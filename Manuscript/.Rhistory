write.xlsx(data.frame(eva_error), file.path(Manu_dir,"TableS1.xlsx"), overwrite= T)
p_max = max(-log10(p_matrix), na.rm = T)
myqq <- function(pvector, title="Quantile-Quantile plot of p-values", size = 24) {
ci <- 0.95
pvector = pvector[!is.na(pvector)]
n <- length(pvector)
plotdata <- data.frame(
observed = -log10(sort(pvector)),
expected = -log10(ppoints(n)),
clower   = -log10(qbeta(p = (1 - ci) / 2, shape1 = seq(n), shape2 = rev(seq(n)))),
cupper   = -log10(qbeta(p = (1 + ci) / 2, shape1 = seq(n), shape2 = rev(seq(n))))
)
ggplot(plotdata, aes(x = expected, y = observed)) +
geom_point() +
geom_ribbon(aes(x = expected, ymax = cupper, ymin = clower), fill = "grey30", alpha = 0.5) +
labs(x = "Expected", y = "Observed", title = title) +
geom_abline(intercept = 0, slope = 1, colour = "red") +
theme(text = element_text(size = size, face = "bold")) +
coord_cartesian(ylim = c(0, p_max), xlim = c(0, max(plotdata$expected)))
}
png(file.path(Manu_dir,"FigureS4.png"), width = 1500, height = 1000, units = "px")
p1 = myqq(p_matrix$PT.0.001.) + labs(tag = "A") + labs(title = "P+T(0.001)")
p2 = myqq(p_matrix$PT.0.05.) + labs(tag = "B") + labs(title = "P+T(0.05)")
p3 = myqq(p_matrix$Lassosum) + labs(tag = "C") + labs(title = "lassosum")
p4 = myqq(p_matrix$SDPR) + labs(tag = "D") + labs(title = "SDPR")
p5 = myqq(p_matrix$PRScs) + labs(tag = "E") + labs(title = "PRS-CS")
p6 = myqq(p_matrix$ACAT) + labs(tag = "F") + labs(title = "OTTERS")
grid.arrange(p1, p2, p3, p4, p5, p6, nrow = 2)
dev.off()
GReX_res_dir = "~/YangFSSdata2/qdai/BS_TWAS/Results/RDA/GReX/R2"
GReX = NULL
for (chr in 1:22){
temp_GReX = read.table(file.path(GReX_res_dir,
paste0("CHR", chr, "_Predicted_R2.txt")),
header = T,
check.names = F)
GReX = rbind(GReX, temp_GReX)
}
compare_R2_tab = function(res, method1, method2){
sub_res = res[, c("TargetID", method1, method2)]
sub_res = sub_res[complete.cases(sub_res), ]
colnames(sub_res) = c("TargetID", "M1", "M2")
maxR = max(sub_res[, c("M1", "M2")])
sub_res = sub_res %>% mutate(col = case_when(
M1 >=0.01 & M2 <0.01 ~ "g1",
M1 <0.01 & M2 >=0.01 ~ "g2",
M1 >=0.01 & M2 >=0.01 ~ "g3",
)) %>% filter(M1 >=0.01 | M2 >= 0.01)
p1 = ggplot(sub_res, aes(x=M1, y=M2, color = col)) +
geom_point(show.legend = FALSE, size = 1) +
scale_x_continuous(trans = "sqrt", breaks = c(0,0.01,0.1,0.2, 0.5), limits = c(0, maxR)) +
scale_y_continuous(trans = "sqrt", breaks = c(0,0.01,0.1,0.2, 0.5), limits = c(0, maxR)) +
geom_abline(intercept = 0, slope = 1, color="black", linetype = "dotdash") +
labs(x = method1, y = method2) +
theme(text = element_text(size=25, face = "bold"),
axis.text = element_text(face="bold"))
return(p1)
}
p1 = compare_R2_tab(GReX, "PRScs", "PT(0.001)") + labs(x = "PRS-CS",y = "P+T(0.001)")
p2 = compare_R2_tab(GReX, "PRScs", "PT(0.05)") + labs(x = "PRS-CS",y = "P+T(0.05)")
p3 = compare_R2_tab(GReX, "PRScs", "Lassosum") + labs(x = "PRS-CS",y = "lassosum")
p4 = compare_R2_tab(GReX, "PRScs", "SDPR") + labs(x = "PRS-CS", y = "SDPR")
Figure3A = grid.arrange(p1,p2,p3,p4, ncol=2, nrow=2,
top = textGrob(bquote("Test"~R^2),gp=gpar(fontsize=32,font=2),
x = 0.09, hjust = 0))
# SDPR and lassosum sometimes failed to obtain results for some genes (~10 for SDPR and ~ 20 for lassosum among all the genes)
GReX_full = GReX[complete.cases(GReX[, c("SDPR", "Lassosum")]), ]
summarize_res = function(res_all, method){
res_vec = unlist(res_all[, method])
res_vec = as.numeric(res_vec[is.na(res_vec) == FALSE])
n_test = length(res_vec)
gt_0.01 = as.integer(sum(res_vec > 0.01))
med_among_gt_0.01 = median(res_vec[res_vec > 0.01])
# gt_0.05 = as.integer(sum(res_vec > 0.05))
# med_among_gt_0.05 = median(res_vec[res_vec > 0.05])
return(t(c(n_test, gt_0.01, med_among_gt_0.01)))
}
method_list = c("PRScs", "SDPR", "PT(0.001)", "PT(0.05)", "Lassosum")
name_list = c("PRScs", "SDPR", "P+T(0.001)", "P+T(0.05)", "lassosum")
res = sapply(1:length(method_list), function(i) summarize_res(GReX_full,method_list[i]))
colnames(res) = name_list
rownames(res) = c("Total Genes",
"Genes with $R^2$ > 0.01",
"Median $R^2$")
pander(res)
write.xlsx(data.frame(res), file.path(Manu_dir,"Table1.xlsx"), overwrite= T)
# compare them
vec = res[2,]
prscs = vec[1]
prop = function(num){
base = vec[num]
(base - prscs)/prscs
}
sapply(2:5, prop)
cor_gene <- function(i, True, Pred){
cor = cor(unlist(True[i,6:ncol(True)]),unlist(Pred[i,6:ncol(True)]))
r2 = cor^2
return(r2)
}
cor_pred <- function(pred_dir){
pred = read.table(pred_dir, header = T, check.names = F, fill = T)
# sometimes the name cloud be different. we remove the numbers after ".".
cleanid <- function(gtex_id) sapply(strsplit(gtex_id, "\\."), "[", 1L)
pred$TargetID <- cleanid(pred$TargetID)
# remove genes with missing prediction GReX
missing = rowSums(is.na(pred))
pred = pred[missing==0, ]
# find genes that are both in the prediction results and the true expression matrix
ID = intersect(pred$TargetID, true$TargetID)
# make sure the genes in the prediction matrix and the true matrix are in the same order
row.names(pred) = pred$TargetID
sub_pred = pred[ID, ]
sub_true = true[ID, colnames(pred)]
# calculate predicion R^2 for all the genes
res_cor = t(sapply(1:nrow(sub_pred), function(i) cor_gene(i, sub_true, sub_pred)))
names(res_cor) = ID
return(res_cor)
}
calculate_R2 = function(methods, chr){
res.dir = file.path(GTEx_V8.dir, paste0("PRScs_GReX"),
paste0(methods, "_CHR", chr), paste0("Pred_CHR", chr),
paste0("CHR", chr, "_Pred_GReX.txt"))
res_cor = cor_pred(res.dir)
res_df = data.frame(names(res_cor), as.numeric(res_cor))
colnames(res_df) = c("TargetID", methods)
return(res_df)
}
calculate_R2_clumping = function(methods, chr){
res.dir = file.path(GTEx_V8.dir, paste0("PRScs_GReX"),
paste0("CHR", chr), paste0("Pred_CHR", chr),
paste0("CHR", chr, "_Pred_GReX.txt"))
res_cor = cor_pred(res.dir)
res_df = data.frame(names(res_cor), as.numeric(res_cor))
colnames(res_df) = c("TargetID", methods)
return(res_df)
}
chr=4
clump=0.99
# Read In True Expression Data
true.dir <- "~/YangFSSdata2/qdai/BS_TWAS/Data/RDA/GTEx_V8/ExpressionFiles/"
true_exp_dir = paste0(true.dir, "Whole_Blood_GTEx_Exp_chr",
chr, "_315TestSamples.txt")
true = read.table(true_exp_dir, header = T, check.names = F)
cor_gene <- function(i, True, Pred){
cor = cor(unlist(True[i,6:ncol(True)]),unlist(Pred[i,6:ncol(True)]))
r2 = cor^2
return(r2)
}
cor_pred <- function(pred_dir){
pred = read.table(pred_dir, header = T, check.names = F, fill = T)
# sometimes the name cloud be different. we remove the numbers after ".".
cleanid <- function(gtex_id) sapply(strsplit(gtex_id, "\\."), "[", 1L)
pred$TargetID <- cleanid(pred$TargetID)
# remove genes with missing prediction GReX
missing = rowSums(is.na(pred))
pred = pred[missing==0, ]
# find genes that are both in the prediction results and the true expression matrix
ID = intersect(pred$TargetID, true$TargetID)
# make sure the genes in the prediction matrix and the true matrix are in the same order
row.names(pred) = pred$TargetID
sub_pred = pred[ID, ]
sub_true = true[ID, colnames(pred)]
# calculate predicion R^2 for all the genes
res_cor = t(sapply(1:nrow(sub_pred), function(i) cor_gene(i, sub_true, sub_pred)))
names(res_cor) = ID
return(res_cor)
}
calculate_R2 = function(methods, chr){
res.dir = file.path(GTEx_V8.dir, paste0("PRScs_GReX"),
paste0(methods, "_CHR", chr), paste0("Pred_CHR", chr),
paste0("CHR", chr, "_Pred_GReX.txt"))
res_cor = cor_pred(res.dir)
res_df = data.frame(names(res_cor), as.numeric(res_cor))
colnames(res_df) = c("TargetID", methods)
return(res_df)
}
calculate_R2_clumping = function(methods, chr){
res.dir = file.path(GTEx_V8.dir, paste0("PRScs_GReX"),
paste0("CHR", chr), paste0("Pred_CHR", chr),
paste0("CHR", chr, "_Pred_GReX.txt"))
res_cor = cor_pred(res.dir)
res_df = data.frame(names(res_cor), as.numeric(res_cor))
colnames(res_df) = c("TargetID", methods)
return(res_df)
}
chr=4
clump=0.99
# Read In True Expression Data
true.dir <- "~/YangFSSdata2/qdai/BS_TWAS/Data/RDA/GTEx_V8/ExpressionFiles/"
true_exp_dir = paste0(true.dir, "Whole_Blood_GTEx_Exp_chr",
chr, "_315TestSamples.txt")
true = read.table(true_exp_dir, header = T, check.names = F)
row.names(true) = true$TargetID
GTEx_V8.dir = "~/YangFSSdata2/qdai/BS_TWAS/Data/RDA/GTEx_V8"
PRScs_noclump = calculate_R2("phi1e-4", chr)
colnames(PRScs_noclump) = c("TargetID", "noclumping")
PRScs_clump = calculate_R2_clumping("phi1e-4", 4)
colnames(PRScs_clump) = c("TargetID", "clumping")
compare_clumping = merge(PRScs_noclump, PRScs_clump,
by = "TargetID")
pdf(file.path(Manu_dir,"FigureS2.pdf"), width = 15, height = 15)  # Open a new pdf file
compare_R2_tab(compare_clumping, "clumping", "noclumping") + labs(x = bquote("clumping"~ R[T] ~ "=0.99"),
y = "no clumping",
title =  bquote("Test"~ R^2))
dev.off()
calculate_R2_diffphi = function(phi, chr){
res.dir = file.path(GTEx_V8.dir, paste0("PRScs_GReX"),
paste0(phi, "_CHR", chr), paste0("Pred_CHR", chr),
paste0("CHR", chr, "_Pred_GReX.txt"))
res_cor = cor_pred(res.dir)
res_df = data.frame(names(res_cor), as.numeric(res_cor))
colnames(res_df) = c("TargetID", phi)
return(res_df)
}
chr=4
clump=0.99
# Read In True Expression Data
true.dir <- "~/YangFSSdata2/qdai/BS_TWAS/Data/RDA/GTEx_V8/ExpressionFiles/"
true_exp_dir = paste0(true.dir, "Whole_Blood_GTEx_Exp_chr",
chr, "_315TestSamples.txt")
true = read.table(true_exp_dir, header = T, check.names = F)
row.names(true) = true$TargetID
GTEx_V8.dir = "~/YangFSSdata2/qdai/BS_TWAS/Data/RDA/GTEx_V8"
# prepare to save the output
PRScs0.01 = calculate_R2_diffphi("phi1e-2", chr)
PRScs0.001 = calculate_R2_diffphi("phi1e-3", chr)
PRScs0.0001 = calculate_R2_diffphi("phi1e-4", chr)
PRScs0.00001 = calculate_R2_diffphi("phi1e-5", chr)
PRScs0.000001 = calculate_R2_diffphi("phi1e-6", chr)
res = merge(PRScs0.01, PRScs0.001, by = "TargetID", all = T) %>%
merge(., PRScs0.0001, by = "TargetID", all = T) %>%
merge(., PRScs0.00001, by = "TargetID", all = T) %>%
merge(., PRScs0.000001, by = "TargetID", all = T) %>%
mutate(CHR = chr)
pdf(file.path(Manu_dir,"FigureS5.pdf"), width = 15, height = 15)  # Open a new pdf file
p1 =compare_R2_tab(res, "phi1e-4", "phi1e-2") + labs(x = bquote(Phi~"="~10^-4), y = bquote(Phi~"="~10^-2), tag = "A")
p2 =compare_R2_tab(res, "phi1e-4", "phi1e-3")+ labs(x = bquote(Phi~"="~10^-4), y = bquote(Phi~"="~10^-3), tag = "B")
p3 = compare_R2_tab(res, "phi1e-4", "phi1e-5")+ labs(x = bquote(Phi~"="~10^-4), y = bquote(Phi~"="~10^-5), tag = "C")
p4 = compare_R2_tab(res, "phi1e-4", "phi1e-6")+ labs(x = bquote(Phi~"="~10^-4), y = bquote(Phi~"="~10^-6), tag = "D")
grid.arrange(p1,p2,p3,p4, ncol=2, nrow=2,
top = textGrob(bquote("Test"~R^2),gp=gpar(fontsize=40,font=2),
x = 0.09, hjust = 0))
dev.off()
png(file.path(Manu_dir,"FigureS6.png"), width = 1500, height = 1000, units = "px")  # Open a new pdf file
p1 = compare_R2_tab(GReX, "PT(0.001)", "PT(0.05)") + labs(x = "P+T(0.001)", y = "P+T(0.05)", tag = "A")
p2 = compare_R2_tab(GReX, "PT(0.001)", "Lassosum") + labs(x = "P+T(0.001)", y = "lassosum", tag = "B")
p3 = compare_R2_tab(GReX, "PT(0.001)", "SDPR") + labs(x = "P+T(0.001)", tag = "C")
p4 = compare_R2_tab(GReX, "PT(0.05)", "SDPR") + labs(x = "P+T(0.05)", tag = "D")
p5 = compare_R2_tab(GReX, "SDPR", "Lassosum") + labs(tag = "E", y = "lassosum")
grid.arrange(p1, p2, p3, p4, p5, nrow = 2)
dev.off()
#---------- Read in TWAS results -----
TWAS_res_dir = "~/YangFSSdata2/qdai/BS_TWAS/Results/RDA/TWAS_UKBB/Cardio"
TWAS_noID = NULL
methods = c("PT0.001", "PT0.05", "Lassosum", "SDPR", "PRScs")
for (chr in c(1:22)){
temp_TWAS = read.table(file.path(TWAS_res_dir,
paste0("CHR", chr, "_Cardio_TWAS.txt")),
header = T)
TWAS_noID = rbind(TWAS_noID, temp_TWAS)
}
#-----------Get the gene name for TWAS results --------
# merge with annotation files
anno = NULL
for (i in 1:22){
anno_temp = read.table(file.path("~/YangFSSdata2/qdai/BS_TWAS/Data/RDA/Anno",
paste0("GTEx_CHR", i, "_GeneAnno.txt")),
header = T)
anno = rbind(anno, anno_temp)
}
colnames(anno) = c("CHR", "POS", "GeneEnd", "ID", "GeneName")
TWAS = merge(TWAS_noID, anno, by = c("CHR", "ID"), all = T)
#---------- Perform Genomic Control -----------
genomic_control = function(method){
TWAS_vec = TWAS[, paste(method, "Z", sep = "_")]
Lambda = median(TWAS_vec^2, na.rm = T)/qchisq(0.5, df = 1)
TWAS_adjusted = pchisq(TWAS_vec^2/Lambda, df = 1, lower.tail = F)
return(TWAS_adjusted)
}
TWAS_adjusted = data.frame(sapply(methods, genomic_control)) %>%
mutate(CHR = TWAS$CHR, ID = TWAS$GeneName, POS = TWAS$POS)
#-----------Perform ACAT -------------------
ACAT_withNA = function(p_vec){
p_vec_noNA = p_vec[is.na(p_vec) == F]
ACAT(p_vec_noNA)
}
ACAT_p = function(ACAT_method, TWAS){
TWAS_sub = TWAS[, c("PRScs","PT0.05", "Lassosum", "SDPR")]
TWAS_ACAT = TWAS_sub[complete.cases(TWAS_sub), ]
ID = TWAS$ID[complete.cases(TWAS_sub)]
ACAT_p = apply(TWAS_ACAT, 1, ACAT_withNA)
ACAT_TWAS = data.frame(ID = ID, ACAT = ACAT_p)
return(ACAT_TWAS)
}
ACAT_TWAS = ACAT_p(c("PRScs", "PT0.001", "PT0.05", "Lassosum", "SDPR"), TWAS_adjusted)
TWAS_final = merge(TWAS_adjusted, ACAT_TWAS, by = "ID",  all = T)
TWAS_final = TWAS_final[is.na(TWAS_final$ACAT) == F,]
#------------------get significant TWAS genes -------------
bon_P_cut = 0.05/nrow(TWAS_final)
colnames(anno) = c("CHR", "GeneStart", "GeneEnd", "TargetID", "ID")
get_TWAS_sig = function(res = TWAS_final, method){
sub_TWAS = res[, c("CHR", "POS", method, "ID", "ACAT")]
sub_TWAS = sub_TWAS[complete.cases(sub_TWAS), ]
colnames(sub_TWAS) = c("CHR", "POS", "PVALUE", "ID", "ACATp")
sub_TWAS = sub_TWAS %>%
merge(., anno, by = c("CHR", "ID")) %>%
mutate(CHR = as.numeric(CHR), POS = as.numeric(POS),
PVALUE = as.numeric(PVALUE)) %>%
filter(PVALUE < bon_P_cut)  %>%
arrange(CHR, POS)
return(sub_TWAS)
}
# save all the significant genes
full_methods = c("ACAT", methods)
full_sig_genes = lapply(full_methods, get_TWAS_sig, res = TWAS_final)
full_ID = NULL
for (i in c(1:length(full_sig_genes))){
full_ID = c(full_ID, full_sig_genes[[i]]$ID)
}
uni_fullID = unique(full_ID)
sub_anno = anno %>% filter(ID %in% uni_fullID) %>% select(TargetID) %>% unlist(.) %>% unname
Cardio_res_dir = "~/YangFSSdata2/qdai/BS_TWAS/Results/RDA/TWAS_UKBB/Cardio/"
write.table(sub_anno,
file.path(Cardio_res_dir, "GeneListforR2.txt"),
sep = "\t",
row.names = F,
col.names = F,
quote = F)
# save the predicted GReX by PRS-CS
GTEx_V8.dir = "~/YangFSSdata2/qdai/BS_TWAS/Data/RDA/GTEx_V8"
GReX_PRScs = NULL
for (chr in c(1:22)){
GReX_dir = file.path(GTEx_V8.dir, paste0("PRScs_GReX"),
paste0("CHR", chr), paste0("Pred_CHR", chr),
paste0("CHR", chr, "_Pred_GReX.txt"))
GReX_temp = read.table(GReX_dir, header = T,
check.names = F, fill = T)
GReX_PRScs = rbind(GReX_PRScs, GReX_temp)
}
Cardio_res_dir = "~/YangFSSdata2/qdai/BS_TWAS/Results/RDA/TWAS_UKBB/Cardio/"
GeneList = unname(unlist(read.table("~/YangFSSdata2/qdai/BS_TWAS/Results/RDA/TWAS_UKBB/Cardio/GeneListforR2.txt",
header = F)))
GReX_PRScs = GReX_PRScs[GReX_PRScs$TargetID %in% GeneList, ]
write.table(GReX_PRScs,
file.path(Cardio_res_dir, "GReXforR2.txt"),
sep = "\t",
row.names = F,
col.names = T,
quote = F)
# calculate the R^2 between the predicted GReX
Cardio_res_dir = "~/YangFSSdata2/qdai/BS_TWAS/Results/RDA/TWAS_UKBB/Cardio/"
sub_GReX = read.table(file.path(Cardio_res_dir, "GReXforR2.txt"), header = T)
sub_ID = sub_GReX$TargetID
Exp_mat = t(sub_GReX[, 6:ncol(sub_GReX)])
colnames(Exp_mat) = sub_ID
cor_mat = cor(Exp_mat)
diag(cor_mat) = 0
# this function is to generate a flag representing whether a gene is independently significant.
# If this is not, the returned flag = 1, else, return 0.
remove_flag = function(gene, TWAS_sig){
test_P = TWAS_sig$PVALUE[gene]
# find genes that have R^2 > 0.5 with this gene
temp_TWAS = TWAS_sig %>%
mutate(COR = cor_mat[TWAS_sig$TargetID[gene], TWAS_sig$TargetID]) %>%
filter(COR^2 > 0.5)
# among these genes, if there exists a gene having p-value less than this gene, return 1, else, return 0.
if (nrow(temp_TWAS) != 0){
p = min(temp_TWAS$PVALUE)
return(ifelse(p < test_P, 1, 0))
} else {
return(0)
}
return(NULL)
}
# find independently significant genes with flag == 0.
get_TWAS_sig_idp = function(res = TWAS_final, method){
get_TWAS_sig(res = res, method = method) %>%
mutate(Flag = sapply(1:nrow(.), remove_flag, TWAS_sig = .)) %>%
filter(Flag == 0) %>%
select(CHR, ID, POS, PVALUE)
}
ACAT_idp = get_TWAS_sig_idp(method = "ACAT")
tab = merge(ACAT_idp, TWAS_final, by = c("CHR","ID", "POS")) %>%
mutate(CHR = as.numeric(CHR), POS = as.numeric(POS)) %>%
arrange(CHR, POS)
write.xlsx(tab,
file.path(Manu_dir, "Table2.xlsx"))
full_res = lapply(full_methods, get_TWAS_sig_idp, res = TWAS_final)
get_TWAS_sig_idp_otherm = function(res = TWAS_final, method){
get_TWAS_sig(res = res, method = method) %>%
mutate(Flag = sapply(1:nrow(.), remove_flag, TWAS_sig = .)) %>%
filter(Flag == 0) %>%
select(CHR, ID, POS, PVALUE, ACATp) %>%
filter(ID %in% ACAT_idp$ID == F)
}
sig_otherm = NULL
for (method in c("PT0.001", "PT0.05",  "Lassosum", "SDPR", "PRScs")){
temp_tab = get_TWAS_sig_idp_otherm(method = method) %>%
mutate(method = method)
sig_otherm = rbind(sig_otherm, temp_tab)
}
write.xlsx(sig_otherm,
file.path(Manu_dir, "TableS2.xlsx"))
#--------------Manhattan Plot------------------
max_p = max(-log10(TWAS_final[, c(methods, "ACAT")]), na.rm = T)
myManPlot <- function(manPlot_dt, title = "Manhantton Plot", chr_vec = 1:22, ntop = 3, sig_level = 2.5e-6, size = 23, chrGAP = 5e2, label_genes, max_p){
# manPlot is a data frame containing columns: CHR, POS, PVALUE, ID
# CHR column should be of the format: chr*
# Setup ploting positions
# chr_vec = sort(unique(manPlot$CHR))
endPos = 0;
plotPos = NULL; temp_dt = NULL;
chrEnd = NULL; LabBreaks = NULL; xlabels = NULL;
for (chr in chr_vec) {
print(chr)
temp = manPlot_dt[manPlot_dt$CHR == chr, ]
temp$POS = order(temp$POS)
if(nrow(temp)>0){
temp_dt = rbind(temp_dt, temp)
chrPos = (temp$POS - min(temp$POS, na.rm = TRUE) ) + endPos + 1
endPos = max(chrPos, na.rm = TRUE) + chrGAP
plotPos = c(plotPos, chrPos)
yline_pos = max(chrPos, na.rm = TRUE) + chrGAP/2
chrEnd = c(chrEnd, yline_pos)
LabBreaks = c(LabBreaks, mean(chrPos, na.rm = TRUE) )
xlabels = c(xlabels, chr)
}
}
manPlot_dt_sort = data.frame(plotPos = plotPos, temp_dt)
require("ggrepel")
ggplot(manPlot_dt_sort, aes(plotPos, -log10(PVALUE), color = factor(CHR) )) +
geom_point() + guides(color = FALSE) +
ylim(c(0, max(-log10(sig_level), max_p))) +
geom_hline(yintercept = -log10(sig_level), color = "red") +
labs(x = "Chromosome", y = "-log10(PVALUE)", title = title) +
scale_x_continuous(breaks = LabBreaks, labels = xlabels, limits = range(plotPos)) +
geom_label_repel(data = manPlot_dt_sort[manPlot_dt_sort$ID %in% label_genes, ],
aes(plotPos, -log10(PVALUE), label = ID), size = 6,
nudge_x = .15,
box.padding = unit(0.25, "lines"),
nudge_y = 1,
segment.curvature = -0.1,
segment.ncp = 3,
segment.angle = 20,
max.overlaps =20) +
theme(text = element_text(size = size, face = "bold"), axis.text.x = element_text(angle = -50, face = "bold", vjust=-0.5))
}
get_manhattan_plot = function(TWAS_res, method, size = 20){
sub_TWAS = TWAS_res[, c("CHR", "POS", method, "ID")]
sub_TWAS = sub_TWAS[complete.cases(sub_TWAS), ]
colnames(sub_TWAS) = c("CHR", "POS", "PVALUE", "ID")
sub_TWAS = sub_TWAS %>% mutate(
CHR = as.numeric(CHR),
POS = as.numeric(POS)
) %>% arrange(CHR, POS)
# sig_level = 0.05/nrow(sub_TWAS)
genes = get_TWAS_sig_idp(method = method)$ID
p1 = myManPlot(sub_TWAS,
title = method,
chr_vec = c(1:22),
size = size, chrGAP = 1.6e2,
label_genes = genes,
max_p = max_p)
return(p1)
}
Figure3B = get_manhattan_plot(TWAS_final, method = "ACAT", size = 25) + theme(axis.text=element_text(size=18)) + labs(title = "TWAS of Cardiovascular Disease by OTTERS")
pdf(file.path(Manu_dir,"Figure3.pdf"), width = 25, height = 10)
grid.arrange(Figure3A, Figure3B, nrow = 1, widths = c(0.4,0.6))
dev.off()
pdf(file.path(Manu_dir,"FigureS7.pdf"), width = 25, height = 15)
p1 = get_manhattan_plot(TWAS_final, "PT0.001") + labs(tag = "A") + labs(title = "TWAS of Cardiovascular Disease by P+T(0.001)")
p2 = get_manhattan_plot(TWAS_final, "PT0.05") + labs(tag = "B") + labs(title = "TWAS of Cardiovascular Disease by P+T(0.05)")
p3 = get_manhattan_plot(TWAS_final, "Lassosum") + labs(tag = "C") + labs(title = "TWAS of Cardiovascular Disease by lassosum")
p4 = get_manhattan_plot(TWAS_final, "SDPR") + labs(tag = "D") + labs(title = "TWAS of Cardiovascular Disease by SDPR")
p5 = get_manhattan_plot(TWAS_final, "PRScs") + labs(tag = "E") + labs(title = "TWAS of Cardiovascular Disease by PRS-CS")
grid.arrange(p1, p2, p3, p4, p5, nrow = 3)
dev.off()
myqq <- function(pvector, title="", size = 24) {
ci <- 0.95
pvector = pvector[!is.na(pvector)]
n <- length(pvector)
plotdata <- data.frame(
observed = -log10(sort(pvector)),
expected = -log10(1:n/n),
clower   = -log10(qbeta(p = (1 - ci) / 2, shape1 = seq(n), shape2 = rev(seq(n)))),
cupper   = -log10(qbeta(p = (1 + ci) / 2, shape1 = seq(n), shape2 = rev(seq(n))))
)
ggplot(plotdata, aes(x = expected, y = observed)) +
geom_point() +
geom_ribbon(aes(ymax = cupper, ymin = clower), fill = "grey30", alpha = 0.5) +
xlim(c(0, max(plotdata$expected))) +
ylim(c(0, max_p)) +
labs(x = "Expected", y = "Observed", title = title) +
geom_abline(intercept = 0, slope = 1, colour = "red") +
theme(text = element_text(size = size, face = "bold"))
}
get_qq_plot = function(TWAS, method){
sub_TWAS = TWAS[, c("CHR", "POS", method, "ID")]
sub_TWAS = sub_TWAS[complete.cases(sub_TWAS), ]
colnames(sub_TWAS) = c("CHR", "POS", "PVALUE", "ID")
p2 = myqq(sub_TWAS$PVALUE, title = "")
return(p2)
}
p1 = get_qq_plot(TWAS_final, "PT0.001") + labs(tag = "A") + labs(title = "P+T(0.001)")
p2 = get_qq_plot(TWAS_final, "PT0.05") + labs(tag = "B") + labs(title = "P+T(0.05)")
p3 = get_qq_plot(TWAS_final, "Lassosum") + labs(tag = "C") + labs(title = "lassosum")
p4 = get_qq_plot(TWAS_final, "SDPR") + labs(tag = "D") + labs(title = "SDPR")
p5 = get_qq_plot(TWAS_final, "PRScs") + labs(tag = "E") + labs(title = "PRS-CS")
p6 = get_qq_plot(TWAS_final, "ACAT") + labs(tag = "F") + labs(title = "OTTERS")
png(file.path(Manu_dir,"FigureS8.png"), width = 1500, height = 1000, units = "px")
grid.arrange(p1, p2, p3, p4, p5, p6, nrow = 2)
dev.off()
