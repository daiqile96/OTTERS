res_tab = rbind(res_tab, temp_tab)
}
}
colnames(res_tab) = c("CausalProp", "Method", "Power", "He2")
res_tab = data.frame(res_tab) %>%
mutate(CausalProp = paste0("Causal Proportion=", CausalProp),
He2 = factor(He2, levels = c(0.05,0.1,0.2,0.5),
labels = c(0.05,0.1,0.2,0.5))) %>%
dplyr::select(CausalProp, Method, Power, He2)
temp_tab = function(method){
eva_power$Power = eva_power[, method]
tab = eva_power %>% mutate(Method = method) %>%
mutate(CausalProp = paste0("Causal Proportion=", CausalProp),
He2 = factor(He2, levels = c(0.05,0.1,0.2,0.5),
labels = c(0.05,0.1,0.2,0.5))) %>%
dplyr::select(CausalProp, Method, Power, He2)
return(tab)
}
power_df_plot <- rbind(temp_tab("PRScs_noclump"),
temp_tab("PRScs"))
power_df_plot$Method = factor(power_df_plot$Method,
levels = c("PRScs_noclump","PRScs"),
labels = c("No Clumping", "Clumping"))
FigureS1B = ggplot(power_df_plot, aes(x = He2, y = as.numeric(Power),
fill = Method)) +
geom_col(width = 0.6, position = position_dodge(0.7)) +
facet_wrap(~CausalProp, ncol = 2) +
labs(y = "TWAS Power", x = bquote(h[e]^2)) +
theme(text = element_text(size=28,face="bold"),
legend.position="right",
legend.box = "vertical",
axis.text = element_text(face="bold")) +
scale_fill_brewer(palette="Set2")
get_only_legend <- function(plot) {
# get tabular interpretation of plot
plot_table <- ggplot_gtable(ggplot_build(plot))
#  Mark only legend in plot
legend_plot <- which(sapply(plot_table$grobs, function(x) x$name) == "guide-box")
# extract legend
legend <- plot_table$grobs[[legend_plot]]
# return legend
return(legend)
}
legend = get_only_legend(FigureS1B + labs(fill = ""))
com_plots = gridExtra::grid.arrange(FigureS1A + theme( legend.position = "none" ) ,
FigureS1B + theme( legend.position = "none" ),
nrow = 1)
pdf(file.path(Manu_dir,"FigureS1.pdf"), width = 21, height = 9)
gridExtra::grid.arrange(com_plots, legend, ncol = 2, widths = c(8, 1))
dev.off()
eva_power <- read.table(file.path(SimuRes_dir, "Manu/Compare/0_Simu_Power.txt"),
header = F,
check.names = F)
colnames(eva_power) = c("CausalProp", "He2", method_list )
#------------------Plot Power Line--------------------------
ACAT_withNA = function(p_vec){
p_vec_noNA = p_vec[is.na(p_vec) == F]
ACAT(p_vec_noNA)
}
temp_p_tab = function(res_dir, cp, he2, ACAT_method = c("SDPR", "PRScs", "PT(0.05)", "Lassosum", "PT(0.001)")){
temp_tab = temp_R2_tab(res_dir, method, cp, he2)
p_matrix_dir = file.path(res_dir,
paste0("Manu/Compare/0_Simu_p_cp_", cp,"_He2_", he2, ".txt"))
p_matrix = read.table(p_matrix_dir, header = T, check.names = F)
p_matrix = p_matrix[, ACAT_method]
ACAT = apply(p_matrix, 1, ACAT_withNA)
ACAT_power = sum(ACAT<2.5e-6)/1000
return(c(cp, "ACAT", ACAT_power, he2))
}
res_tab = NULL
for (cp in c(0.001, 0.01, 0.1, 0.2)){
for (he2 in c(0.05, 0.1, 0.2, 0.5)){
temp_tab =  temp_p_tab(res_dir, cp, he2)
res_tab = rbind(res_tab, temp_tab)
}
}
colnames(res_tab) = c("CausalProp", "Method", "Power", "He2")
res_tab = data.frame(res_tab) %>%
mutate(CausalProp = paste0("Causal Proportion=", CausalProp),
He2 = factor(He2, levels = c(0.05,0.1,0.2,0.5),
labels = c(0.05,0.1,0.2,0.5))) %>%
dplyr::select(CausalProp, Method, Power, He2)
temp_tab = function(method){
eva_power$Power = eva_power[, method]
tab = eva_power %>% mutate(Method = method) %>%
mutate(CausalProp = paste0("Causal Proportion=", CausalProp),
He2 = factor(He2, levels = c(0.05,0.1,0.2,0.5),
labels = c(0.05,0.1,0.2,0.5))) %>%
dplyr::select(CausalProp, Method, Power, He2)
return(tab)
}
power_df_plot <- rbind(temp_tab("SDPR"),
temp_tab("PRScs"),
temp_tab("PT(0.05)"),
temp_tab("PT(0.001)"),
temp_tab("Lassosum"),
res_tab)
eva_power <- read.table(file.path(SimuRes_dir, "Manu/Compare/0_Simu_Power.txt"),
header = F,
check.names = F)
colnames(eva_power) = c("CausalProp", "He2", method_list )
#------------------Plot Power Line--------------------------
ACAT_withNA = function(p_vec){
p_vec_noNA = p_vec[is.na(p_vec) == F]
ACAT(p_vec_noNA)
}
temp_p_tab = function(res_dir, cp, he2, ACAT_method = c("SDPR", "PRScs", "PT(0.05)", "Lassosum", "PT(0.001)")){
temp_tab = temp_R2_tab(res_dir, method, cp, he2)
p_matrix_dir = file.path(res_dir,
paste0("Manu/Compare/0_Simu_p_cp_", cp,"_He2_", he2, ".txt"))
p_matrix = read.table(p_matrix_dir, header = T, check.names = F)
p_matrix = p_matrix[, ACAT_method]
ACAT = apply(p_matrix, 1, ACAT_withNA)
ACAT_power = sum(ACAT<2.5e-6)/1000
return(c(cp, "ACAT", ACAT_power, he2))
}
res_tab = NULL
for (cp in c(0.001, 0.01, 0.1, 0.2)){
for (he2 in c(0.05, 0.1, 0.2, 0.5)){
temp_tab =  temp_p_tab(res_dir, cp, he2)
res_tab = rbind(res_tab, temp_tab)
}
}
colnames(res_tab) = c("CausalProp", "Method", "Power", "He2")
res_tab = data.frame(res_tab) %>%
mutate(CausalProp = paste0("Causal Proportion=", CausalProp),
He2 = factor(He2, levels = c(0.05,0.1,0.2,0.5),
labels = c(0.05,0.1,0.2,0.5))) %>%
dplyr::select(CausalProp, Method, Power, He2)
temp_tab = function(method){
eva_power$Power = eva_power[, method]
tab = eva_power %>% mutate(Method = method) %>%
mutate(CausalProp = paste0("Causal Proportion=", CausalProp),
He2 = factor(He2, levels = c(0.05,0.1,0.2,0.5),
labels = c(0.05,0.1,0.2,0.5))) %>%
dplyr::select(CausalProp, Method, Power, He2)
return(tab)
}
power_df_plot <- rbind(temp_tab("SDPR"),
temp_tab("PRScs"),
temp_tab("PT(0.05)"),
temp_tab("PT(0.001)"),
temp_tab("Lassosum"),
res_tab)
eva_power
method_list
method_list = c("SDPR", "PRScs", "PT(0.05)", "PT(0.001)", "Lassosum")
eva_power <- read.table(file.path(SimuRes_dir, "Manu/Compare/0_Simu_Power.txt"),
header = F,
check.names = F)
colnames(eva_power) = c("CausalProp", "He2", method_list)
#------------------Plot Power Line--------------------------
ACAT_withNA = function(p_vec){
p_vec_noNA = p_vec[is.na(p_vec) == F]
ACAT(p_vec_noNA)
}
temp_p_tab = function(res_dir, cp, he2, ACAT_method = c("SDPR", "PRScs", "PT(0.05)", "Lassosum", "PT(0.001)")){
temp_tab = temp_R2_tab(res_dir, method, cp, he2)
p_matrix_dir = file.path(res_dir,
paste0("Manu/Compare/0_Simu_p_cp_", cp,"_He2_", he2, ".txt"))
p_matrix = read.table(p_matrix_dir, header = T, check.names = F)
p_matrix = p_matrix[, ACAT_method]
ACAT = apply(p_matrix, 1, ACAT_withNA)
ACAT_power = sum(ACAT<2.5e-6)/1000
return(c(cp, "ACAT", ACAT_power, he2))
}
res_tab = NULL
for (cp in c(0.001, 0.01, 0.1, 0.2)){
for (he2 in c(0.05, 0.1, 0.2, 0.5)){
temp_tab =  temp_p_tab(res_dir, cp, he2)
res_tab = rbind(res_tab, temp_tab)
}
}
colnames(res_tab) = c("CausalProp", "Method", "Power", "He2")
res_tab = data.frame(res_tab) %>%
mutate(CausalProp = paste0("Causal Proportion=", CausalProp),
He2 = factor(He2, levels = c(0.05,0.1,0.2,0.5),
labels = c(0.05,0.1,0.2,0.5))) %>%
dplyr::select(CausalProp, Method, Power, He2)
temp_tab = function(method){
eva_power$Power = eva_power[, method]
tab = eva_power %>% mutate(Method = method) %>%
mutate(CausalProp = paste0("Causal Proportion=", CausalProp),
He2 = factor(He2, levels = c(0.05,0.1,0.2,0.5),
labels = c(0.05,0.1,0.2,0.5))) %>%
dplyr::select(CausalProp, Method, Power, He2)
return(tab)
}
power_df_plot <- rbind(temp_tab("SDPR"),
temp_tab("PRScs"),
temp_tab("PT(0.05)"),
temp_tab("PT(0.001)"),
temp_tab("Lassosum"),
res_tab)
power_df_plot$Method = factor(power_df_plot$Method,
levels = c("PT(0.001)", "PT(0.05)",
"Lassosum", "SDPR", "PRScs", "ACAT"),
labels = c("P+T(0.001)", "P+T(0.05)",
"lassosum",  "SDPR", "PRS-CS","OTTERS"))
ggplot(power_df_plot, aes(x = He2, y = as.numeric(Power),
fill = Method)) +
geom_col(width = 0.6, position = position_dodge(0.7)) +
facet_wrap(~CausalProp, ncol = 2) +
labs(y = NULL, x = bquote(h[e]^2), title = "") +
theme(text = element_text(size=40, face="bold"),
legend.position="bottom",
legend.box = "vertical",
axis.text = element_text(face="bold")) +
scale_fill_brewer(palette="Accent")
ggsave(file.path(Manu_dir,"FigureS3.pdf"), width = 16, height = 14)
Perm_dir = "~/YangFSSdata2/qdai/BS_TWAS/Data/Simulation/TWAS/std_cp_0.01_He2_0.2/Perm"
p_matrix = read.table(file.path(Perm_dir, "Perm_results.txt"), header = T)
get_error_tab = function(p_cut){
error_tab = data.frame(error = colSums(p_matrix < p_cut))
return(error_tab)
}
error_0.01 = get_error_tab(0.01)
error_0.0001 = get_error_tab(0.0001)
error_gw = get_error_tab(2.56*10^(-6))
eva_error = cbind(error_0.01, error_0.0001, error_gw)/10^6
colnames(eva_error) = c("0.01", "0.0001", "2.56*10^(-6)")
write.xlsx(data.frame(eva_error), file.path(Manu_dir,"TableS1.xlsx"), overwrite= T)
eva_error
error_gw = get_error_tab(2.5*10^(-6))
eva_error = cbind(error_0.01, error_0.0001, error_gw)/10^6
colnames(eva_error) = c("0.01", "0.0001", "2.5*10^(-6)")
eva_error
write.xlsx(data.frame(eva_error), file.path(Manu_dir,"TableS1.xlsx"), overwrite= T)
eva_error
#---------- Read in TWAS results -----
TWAS_res_dir = "~/YangFSSdata2/qdai/BS_TWAS/Results/RDA/TWAS_UKBB/Cardio"
TWAS_noID = NULL
methods = c("PT0.001", "PT0.05", "Lassosum", "SDPR", "PRScs")
for (chr in c(1:22)){
temp_TWAS = read.table(file.path(TWAS_res_dir,
paste0("CHR", chr, "_Cardio_TWAS.txt")),
header = T)
TWAS_noID = rbind(TWAS_noID, temp_TWAS)
}
#-----------Get the gene name for TWAS results --------
# merge with annotation files
anno = NULL
for (i in 1:22){
anno_temp = read.table(file.path("~/YangFSSdata2/qdai/BS_TWAS/Data/RDA/Anno",
paste0("GTEx_CHR", i, "_GeneAnno.txt")),
header = T)
anno = rbind(anno, anno_temp)
}
colnames(anno) = c("CHR", "GeneStart", "GeneEnd", "ID", "GeneName")
TWAS = merge(TWAS_noID, anno, by = c("CHR", "ID"), all = T)
#---------- Perform Genomic Control -----------
genomic_control = function(method){
TWAS_vec = TWAS[, paste(method, "Z", sep = "_")]
Lambda = median(TWAS_vec^2, na.rm = T)/qchisq(0.5, df = 1)
TWAS_adjusted = pchisq(TWAS_vec^2/Lambda, df = 1, lower.tail = F)
return(TWAS_adjusted)
}
TWAS_adjusted = data.frame(sapply(methods, genomic_control)) %>%
mutate(CHR = TWAS$CHR, ID = TWAS$GeneName, POS = TWAS$POS)
#-----------Perform ACAT -------------------
ACAT_withNA = function(p_vec){
p_vec_noNA = p_vec[is.na(p_vec) == F]
ACAT(p_vec_noNA)
}
ACAT_p = function(ACAT_method, TWAS){
TWAS_sub = TWAS[, c("PRScs","PT0.05", "Lassosum", "SDPR")]
TWAS_ACAT = TWAS_sub[complete.cases(TWAS_sub), ]
ID = TWAS$ID[complete.cases(TWAS_sub)]
ACAT_p = apply(TWAS_ACAT, 1, ACAT_withNA)
ACAT_TWAS = data.frame(ID = ID, ACAT = ACAT_p)
return(ACAT_TWAS)
}
ACAT_TWAS = ACAT_p(c("PRScs", "PT0.001", "PT0.05", "Lassosum", "SDPR"), TWAS_adjusted)
TWAS_final = merge(TWAS_adjusted, ACAT_TWAS, by = "ID",  all = T)
TWAS_final = TWAS_final[is.na(TWAS_final$ACAT) == F,]
bon_P_cut = 0.05/nrow(TWAS_final)
colnames(anno) = c("CHR", "GeneStart", "GeneEnd", "TargetID", "ID")
get_TWAS_sig = function(res = TWAS_final, method){
sub_TWAS = res[, c("CHR", "POS", method, "ID", "ACAT")]
sub_TWAS = sub_TWAS[complete.cases(sub_TWAS), ]
colnames(sub_TWAS) = c("CHR", "POS", "PVALUE", "ID", "ACATp")
sub_TWAS = sub_TWAS %>%
merge(., anno, by = c("CHR", "ID")) %>%
mutate(CHR = as.numeric(CHR), POS = as.numeric(POS),
PVALUE = as.numeric(PVALUE)) %>%
filter(PVALUE < bon_P_cut)  %>%
arrange(CHR, POS)
return(sub_TWAS)
}
full_methods = c("ACAT", methods)
full_sig_genes = lapply(full_methods, get_TWAS_sig, res = TWAS_final)
full_methods
TWAS_final
get_TWAS_sig("ACAT")
get_TWAS_sig(method = "ACAT")
head(TWAS_final)
anno = NULL
for (i in 1:22){
anno_temp = read.table(file.path("~/YangFSSdata2/qdai/BS_TWAS/Data/RDA/Anno",
paste0("GTEx_CHR", i, "_GeneAnno.txt")),
header = T)
anno = rbind(anno, anno_temp)
}
colnames(anno) = c("CHR", "POS", "GeneEnd", "ID", "GeneName")
TWAS = merge(TWAS_noID, anno, by = c("CHR", "ID"), all = T)
genomic_control = function(method){
TWAS_vec = TWAS[, paste(method, "Z", sep = "_")]
Lambda = median(TWAS_vec^2, na.rm = T)/qchisq(0.5, df = 1)
TWAS_adjusted = pchisq(TWAS_vec^2/Lambda, df = 1, lower.tail = F)
return(TWAS_adjusted)
}
TWAS_adjusted = data.frame(sapply(methods, genomic_control)) %>%
mutate(CHR = TWAS$CHR, ID = TWAS$GeneName, POS = TWAS$POS)
ACAT_withNA = function(p_vec){
p_vec_noNA = p_vec[is.na(p_vec) == F]
ACAT(p_vec_noNA)
}
ACAT_p = function(ACAT_method, TWAS){
TWAS_sub = TWAS[, c("PRScs","PT0.05", "Lassosum", "SDPR")]
TWAS_ACAT = TWAS_sub[complete.cases(TWAS_sub), ]
ID = TWAS$ID[complete.cases(TWAS_sub)]
ACAT_p = apply(TWAS_ACAT, 1, ACAT_withNA)
ACAT_TWAS = data.frame(ID = ID, ACAT = ACAT_p)
return(ACAT_TWAS)
}
ACAT_TWAS = ACAT_p(c("PRScs", "PT0.001", "PT0.05", "Lassosum", "SDPR"), TWAS_adjusted)
TWAS_final = merge(TWAS_adjusted, ACAT_TWAS, by = "ID",  all = T)
TWAS_final = TWAS_final[is.na(TWAS_final$ACAT) == F,]
bon_P_cut = 0.05/nrow(TWAS_final)
colnames(anno) = c("CHR", "GeneStart", "GeneEnd", "TargetID", "ID")
get_TWAS_sig = function(res = TWAS_final, method){
sub_TWAS = res[, c("CHR", "POS", method, "ID", "ACAT")]
sub_TWAS = sub_TWAS[complete.cases(sub_TWAS), ]
colnames(sub_TWAS) = c("CHR", "POS", "PVALUE", "ID", "ACATp")
sub_TWAS = sub_TWAS %>%
merge(., anno, by = c("CHR", "ID")) %>%
mutate(CHR = as.numeric(CHR), POS = as.numeric(POS),
PVALUE = as.numeric(PVALUE)) %>%
filter(PVALUE < bon_P_cut)  %>%
arrange(CHR, POS)
return(sub_TWAS)
}
# save all the significant genes
full_methods = c("ACAT", methods)
full_sig_genes = lapply(full_methods, get_TWAS_sig, res = TWAS_final)
full_ID = NULL
for (i in c(1:length(full_sig_genes))){
full_ID = c(full_ID, full_sig_genes[[i]]$ID)
}
uni_fullID = unique(full_ID)
sub_anno = anno %>% filter(ID %in% uni_fullID) %>% select(TargetID) %>% unlist(.) %>% unname
0.05/16,395
0.05/16395
0.05/16678
# calculate the R^2 between the predicted GReX
Cardio_res_dir = "~/YangFSSdata2/qdai/BS_TWAS/Results/RDA/TWAS_UKBB/Cardio/"
sub_GReX = read.table(file.path(Cardio_res_dir, "GReXforR2.txt"), header = T)
sub_ID = sub_GReX$TargetID
Exp_mat = t(sub_GReX[, 6:ncol(sub_GReX)])
colnames(Exp_mat) = sub_ID
cor_mat = cor(Exp_mat)
diag(cor_mat) = 0
# this function is to generate a flag representing whether a gene is independently significant.
# If this is not, the returned flag = 1, else, return 0.
remove_flag = function(gene, TWAS_sig){
test_P = TWAS_sig$PVALUE[gene]
# find genes that have R^2 > 0.5 with this gene
temp_TWAS = TWAS_sig %>%
mutate(COR = cor_mat[TWAS_sig$TargetID[gene], TWAS_sig$TargetID]) %>%
filter(COR^2 > 0.5)
# among these genes, if there exists a gene having p-value less than this gene, return 1, else, return 0.
if (nrow(temp_TWAS) != 0){
p = min(temp_TWAS$PVALUE)
return(ifelse(p < test_P, 1, 0))
} else {
return(0)
}
return(NULL)
}
# find independently significant genes with flag == 0.
get_TWAS_sig_idp = function(res = TWAS_final, method){
get_TWAS_sig(res = res, method = method) %>%
mutate(Flag = sapply(1:nrow(.), remove_flag, TWAS_sig = .)) %>%
filter(Flag == 0) %>%
select(CHR, ID, POS, PVALUE)
}
ACAT_idp = get_TWAS_sig_idp(method = "ACAT")
Cardio_res_dir = "~/YangFSSdata2/qdai/BS_TWAS/Results/RDA/TWAS_UKBB/Cardio/"
write.table(sub_anno,
file.path(Cardio_res_dir, "GeneListforR2.txt"),
sep = "\t",
row.names = F,
col.names = F,
quote = F)
# calculate the R^2 between the predicted GReX
Cardio_res_dir = "~/YangFSSdata2/qdai/BS_TWAS/Results/RDA/TWAS_UKBB/Cardio/"
sub_GReX = read.table(file.path(Cardio_res_dir, "GReXforR2.txt"), header = T)
sub_ID = sub_GReX$TargetID
Exp_mat = t(sub_GReX[, 6:ncol(sub_GReX)])
colnames(Exp_mat) = sub_ID
cor_mat = cor(Exp_mat)
diag(cor_mat) = 0
# this function is to generate a flag representing whether a gene is independently significant.
# If this is not, the returned flag = 1, else, return 0.
remove_flag = function(gene, TWAS_sig){
test_P = TWAS_sig$PVALUE[gene]
# find genes that have R^2 > 0.5 with this gene
temp_TWAS = TWAS_sig %>%
mutate(COR = cor_mat[TWAS_sig$TargetID[gene], TWAS_sig$TargetID]) %>%
filter(COR^2 > 0.5)
# among these genes, if there exists a gene having p-value less than this gene, return 1, else, return 0.
if (nrow(temp_TWAS) != 0){
p = min(temp_TWAS$PVALUE)
return(ifelse(p < test_P, 1, 0))
} else {
return(0)
}
return(NULL)
}
# find independently significant genes with flag == 0.
get_TWAS_sig_idp = function(res = TWAS_final, method){
get_TWAS_sig(res = res, method = method) %>%
mutate(Flag = sapply(1:nrow(.), remove_flag, TWAS_sig = .)) %>%
filter(Flag == 0) %>%
select(CHR, ID, POS, PVALUE)
}
ACAT_idp = get_TWAS_sig_idp(method = "ACAT")
tab = merge(ACAT_idp, TWAS_final, by = c("CHR","ID", "POS")) %>%
mutate(CHR = as.numeric(CHR), POS = as.numeric(POS)) %>%
arrange(CHR, POS)
write.xlsx(tab,
file.path(Manu_dir, "Table2.xlsx"))
tab
get_TWAS_sig_idp_otherm = function(res = TWAS_final, method){
get_TWAS_sig(res = res, method = method) %>%
mutate(Flag = sapply(1:nrow(.), remove_flag, TWAS_sig = .)) %>%
filter(Flag == 0) %>%
select(CHR, ID, POS, PVALUE, ACATp) %>%
filter(ID %in% ACAT_idp$ID == F)
}
sig_otherm = NULL
for (method in c("PT0.001", "PT0.05",  "Lassosum", "SDPR", "PRScs")){
temp_tab = get_TWAS_sig_idp_otherm(method = method) %>%
mutate(method = method)
sig_otherm = rbind(sig_otherm, temp_tab)
}
write.xlsx(sig_otherm,
file.path(Manu_dir, "TableS2.xlsx"))
sig_otherm
full_methods
lapply(full_methods,get_TWAS_sig_idp)
lapply(full_methods, get_TWAS_sig_idp, res = TWAS_final)
full_res = lapply(full_methods, get_TWAS_sig_idp, res = TWAS_final)
View(full_res)
chr=1
MedianN_dir = "~/YangFSSdata2/qdai/BS_TWAS/Data/RDA/eQTLGen/MedianN/"
MedianN = NULL
chr=1
temp_MN = read.table(file.path(MedianN_dir, paste0("CHR", chr)
, paste0("GTEx_chr", chr,"_median_N.txt")),
header = F,
check.names = F)
temp_MN
chr=1
for (chr in 1:22){
temp_MN = read.table(file.path(MedianN_dir, paste0("CHR", chr)
, paste0("GTEx_chr", chr,"_median_N.txt")),
header = F,
check.names = F)
MedianN = rbind(MedianN, temp_MN)
}
median(MedianN$V2)
for (chr in 1:22){
temp_MN = read.table(file.path(MedianN_dir, paste0("CHR", chr)
, paste0("GTEx_chr", chr,"_clumped_N.txt")),
header = F,
check.names = F)
MedianN = rbind(MedianN, temp_MN)
}
median(MedianN$V2)
MedianN = NULL
for (chr in 1:22){
temp_MN = read.table(file.path(MedianN_dir, paste0("CHR", chr)
, paste0("GTEx_chr", chr,"_clumped_N.txt")),
header = F,
check.names = F)
MedianN = rbind(MedianN, temp_MN)
}
median(MedianN$V2)
library(dplyr)
Nfile = NULL
for (i in 1:22){
temp_N = read.table(paste0("~/YangFSSdata2/qdai/BS_TWAS/Data/RDA/eQTLGen/MedianN/CHR", i,"/GTEx_chr", i, "_clumped_N.txt"))
Nfile = rbind(Nfile, temp_N)
}
colnames(Nfile) = c("TargetID", "N")
GReX_res_dir = "~/YangFSSdata2/qdai/BS_TWAS/Results/RDA/GReX/R2"
GReX = NULL
for (chr in 1:22){
temp_GReX = read.table(file.path(GReX_res_dir,
paste0("CHR", chr, "_Predicted_R2.txt")),
header = T,
check.names = F)
GReX = rbind(GReX, temp_GReX)
}
GReX = GReX[complete.cases(GReX[, c("PRScs", "SDPR", "Lassosum")]), ]
temp = merge(GReX, Nfile, by = "TargetID")
temp = temp %>% mutate(Batch = case_when(N < 2000 ~ 1,
N < 3000 & N >= 2000 ~ 2,
N < 4000 & N >= 3000 ~ 3,
N >= 4000 ~ 4))
table(temp$Batch)/sum(is.na(temp$Batch) == F)
